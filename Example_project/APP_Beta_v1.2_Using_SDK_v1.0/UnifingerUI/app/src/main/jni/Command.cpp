/* DO NOT EDIT THIS FILE - it is machine generated */
#include <com_suprema_www_unifingerui_Command.h>
#include <stdio.h>
#include <iostream>
#include <string.h>
#include <stdlib.h>
#include <cwchar>
#include "UF_API.h"

#include <android/log.h>

#define  LOG_TAG    "SFM_SDK"
#define  LOGE(...)  __android_log_print(ANDROID_LOG_ERROR,LOG_TAG,__VA_ARGS__)

int writePacketBuffer(unsigned char * cmd);
int readPacketBuffer(int size, unsigned char * read_buffer);

static jclass gcls=NULL;

JNIEnv* genv;
jobject gobj;

char * g_read_callback_function_name = NULL;
char * g_write_callback_function_name = NULL;
char * g_command_class_name = NULL;

//
jint JNI_OnLoad(JavaVM* vm, void* reserved)
{
      if (vm->GetEnv(reinterpret_cast<void**>(&genv), JNI_VERSION_1_6) != JNI_OK) {
        return -1;
      }

      return JNI_VERSION_1_6;
}


JNIEXPORT jint JNICALL Java_com_suprema_www_unifingerui_Command_UF_1Enroll  (JNIEnv * env, jobject obj, jint _userID)
{
    gobj=obj;

    unsigned int userID=_userID;
    unsigned int imageQuality;

    int result=0;
    result=UF_Enroll(userID,UF_ENROLL_CHECK_FINGER,&userID,&imageQuality);

    if(result!=UF_RET_SUCCESS)
    {
        return -1;
    }

    return result;

}

void Update_UI_Result( int userID)
{
    jmethodID mid = genv->GetMethodID(gcls, "DisplayIdentifyResult", "(I)V");
    genv->CallVoidMethod( gobj, mid, userID);
}


JNIEXPORT jint JNICALL Java_com_suprema_www_unifingerui_Command_UF_1Identify  (JNIEnv * env, jobject obj)
{
    gobj=obj;
    int result=0;
    unsigned int userID=0;
    unsigned char subID=0;
    result=UF_Identify(&userID,&subID);

    if(result!=UF_RET_SUCCESS)
    {
        Update_UI_Result(result);
        return -1;
    }

    Update_UI_Result(userID);

    return result;

}
JNIEXPORT jint JNICALL Java_com_suprema_www_unifingerui_Command_UF_1Verify (JNIEnv *env, jobject obj, jint _userID)
{
    gobj=obj;
    int result =0;
    unsigned int userID=(unsigned int)_userID;
    unsigned char subID=0;
    result = UF_Verify(userID,&subID);

    if(result!=UF_RET_SUCCESS)
    {
        return -1;
    }

    return UF_RET_SUCCESS;

}

JNIEXPORT jbyteArray JNICALL Java_com_suprema_www_unifingerui_Command_UF_1ScanImage(JNIEnv * env, jobject obj, jint width, jint height)
{
    jbyteArray Image;
    gobj=obj;

    int result =0;

    UFImage * m_pImage = (UFImage*) malloc( UF_IMAGE_HEADER_SIZE *sizeof(int) + width*height); //it needs free

    result = UF_ScanImage(m_pImage);

    if(result==UF_RET_SUCCESS)
    {
        Image = env->NewByteArray(width*height);
        env->SetByteArrayRegion(Image, 0 , (width*height), reinterpret_cast<jbyte*>(m_pImage->buffer));
    }

    if(result!=UF_RET_SUCCESS)
    {
        Image = env->NewByteArray(width*height);
    }


    free(m_pImage);
    return Image;
}

JNIEXPORT jbyteArray JNICALL Java_com_suprema_www_unifingerui_Command_UF_1ReadImage (JNIEnv * env, jobject obj, jint width, jint height)
{
    jbyteArray Image;
    gobj=obj;

    int result =0;

    UFImage * m_pImage = (UFImage*) malloc( UF_IMAGE_HEADER_SIZE *sizeof(int) + width*height); //it needs free

    result = UF_ReadImage(m_pImage);

    if(result==UF_RET_SUCCESS)
    {
        Image = env->NewByteArray(width*height);
        env->SetByteArrayRegion(Image, 0 , (width*height), reinterpret_cast<jbyte*>(m_pImage->buffer));
    }

    if(result!=UF_RET_SUCCESS)
    {
        Image = env->NewByteArray(width*height);
    }

    free(m_pImage);
    return Image;

}


int writePacketBuffer(unsigned  char * cmd)
{
    jmethodID mid = genv->GetMethodID(gcls, g_write_callback_function_name, "(Ljava/lang/String;)I");

    if (mid == NULL) {
    LOGE("write null");
      return -1; /* method not found */
    }


    jstring jStringParam;
    std::string str="";

    for(int i=0; i<UF_PACKET_LEN; i++) {
        unsigned char ch[1];
        sprintf((char*)ch,"%02X",cmd[i]);
            std::string temp(reinterpret_cast<const char *>(ch));
            str += temp;
    }


    jStringParam=genv->NewStringUTF(str.c_str());

    int real_write_len = (int)genv->CallIntMethod( gobj, mid, jStringParam);//(jstring)"345");
    genv->DeleteLocalRef(jStringParam);

    return real_write_len;

}



int readPacketBuffer(int size, unsigned char * read_buffer)
{
    jmethodID mid = genv->GetMethodID(gcls, g_read_callback_function_name, "(I[B)I");

    if (mid == NULL) {
      LOGE("read null");
      return -1; /* method not found */
    }

    jbyteArray app_read_buffer= genv->NewByteArray(size);

    int real_read_len = (int)(genv->CallIntMethod(gobj, mid, size, app_read_buffer));
    if(real_read_len>0)
    {
        unsigned char * buffer=(unsigned char*)genv->GetByteArrayElements(app_read_buffer,0);
        memcpy(read_buffer,buffer,real_read_len);
        genv->ReleaseByteArrayElements(app_read_buffer,(jbyte*)buffer,0);
    }

    return real_read_len;
}

JNIEXPORT void JNICALL Java_com_suprema_www_unifingerui_Command_UF_1SetDefaultPacketSIze  (JNIEnv * env, jobject obj, jint defaultSize)
{
    gobj=obj;
    UF_SetDefaultPacketSize(defaultSize);
}


JNIEXPORT jint JNICALL Java_com_suprema_www_unifingerui_Command_SetReadCallbackFunctionName  (JNIEnv * env, jobject obj, jstring fName)
{
    gobj=obj;

    if(g_read_callback_function_name != NULL)
        free(g_read_callback_function_name);

    const char * temp_str = env->GetStringUTFChars(fName,0);

    int len = strlen(temp_str);
    g_read_callback_function_name = (char *) malloc (len);
    strcpy(g_read_callback_function_name, temp_str);

    env->ReleaseStringUTFChars(fName,temp_str);

    UF_SetReadCommandCallback(readPacketBuffer);

    return 0;
}

JNIEXPORT jint JNICALL Java_com_suprema_www_unifingerui_Command_SetWriteCallbackFunctionName (JNIEnv * env, jobject obj, jstring fName)
{
    gobj=obj;

    if(g_write_callback_function_name != NULL)
        free(g_write_callback_function_name);

    const char * temp_str = env->GetStringUTFChars(fName,0);

    int len = strlen(temp_str);
    g_write_callback_function_name = (char *) malloc (len+1);
    strcpy(g_write_callback_function_name, temp_str);

    env->ReleaseStringUTFChars(fName,temp_str);

    UF_SetWriteCommandCallback(writePacketBuffer);

    return 0;
}


JNIEXPORT jint JNICALL Java_com_suprema_www_unifingerui_Command_SetCommandClassName (JNIEnv * env, jobject obj, jstring cName)
{
    gobj=obj;



    const char * temp_str = env->GetStringUTFChars(cName,0);

    int len = strlen(temp_str);
    g_command_class_name = (char *) malloc (len+1);
    strcpy(g_command_class_name, temp_str);

    env->ReleaseStringUTFChars(cName,temp_str);


    jclass wcls=NULL;

    wcls = genv->FindClass(g_command_class_name);
    if(wcls==NULL)
     return -1;


    gcls = reinterpret_cast<jclass>(genv->NewGlobalRef(wcls));
    if(gcls==NULL)
      return -1;

    genv->DeleteLocalRef(wcls);

    if(g_command_class_name != NULL)
        free(g_command_class_name);


    return 0;

}
